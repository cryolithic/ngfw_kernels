From 92426f19be94ac7f85ce0fe2dfd8f94de3306276 Mon Sep 17 00:00:00 2001
From: Brett Mastbergen <bmastbergen@untangle.com>
Date: Mon, 13 Jan 2020 10:47:25 -0500
Subject: [PATCH 2/8] untangle: extensions

This provides extensions to cmsg so that special fields like NFMARK,
and SADDR can be specified in cmsg ancilarry data options in
recvfrom and sendmsg.  This is used in libnetcap to send and
receive UDP packets.
---
 include/linux/in.h       |  6 +++++
 include/net/ip.h         |  5 ++++
 include/uapi/linux/in.h  |  4 ++++
 include/uapi/linux/udp.h |  3 +++
 net/ipv4/icmp.c          |  3 +++
 net/ipv4/ip_output.c     | 11 +++++----
 net/ipv4/ip_sockglue.c   | 52 ++++++++++++++++++++++++++++++++++++++++
 net/ipv4/raw.c           |  2 ++
 net/ipv4/udp.c           | 23 ++++++++++++++----
 9 files changed, 101 insertions(+), 8 deletions(-)

Index: linux-5.10.205-untangle-3/include/linux/in.h
===================================================================
--- linux-5.10.205-untangle-3.orig/include/linux/in.h	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/include/linux/in.h	2024-01-09 15:46:29.065564402 +0100
@@ -14,6 +14,12 @@
 #ifndef _LINUX_IN_H
 #define _LINUX_IN_H
 
+#include <linux/types.h>
+
+struct ip_sendnfmark_opts {
+	u32 on;
+	u32 mark;
+};
 
 #include <linux/errno.h>
 #include <uapi/linux/in.h>
Index: linux-5.10.205-untangle-3/include/net/ip.h
===================================================================
--- linux-5.10.205-untangle-3.orig/include/net/ip.h	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/include/net/ip.h	2024-01-09 15:46:29.065564402 +0100
@@ -77,6 +77,11 @@
 	int			oif;
 	struct ip_options_rcu	*opt;
 	__u8			protocol;
+
+	/* Extensions */
+	u16 pkt_udp_sport;
+	u32 nfmark;
+
 	__u8			ttl;
 	__s16			tos;
 	char			priority;
Index: linux-5.10.205-untangle-3/include/uapi/linux/in.h
===================================================================
--- linux-5.10.205-untangle-3.orig/include/uapi/linux/in.h	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/include/uapi/linux/in.h	2024-01-09 15:46:29.069564349 +0100
@@ -125,6 +125,10 @@
 #define IP_RECVFRAGSIZE	25
 #define IP_RECVERR_RFC4884	26
 
+/* Extensions */
+#define IP_SADDR	27
+#define IP_SENDNFMARK	28
+
 /* IP_MTU_DISCOVER values */
 #define IP_PMTUDISC_DONT		0	/* Never send DF frames */
 #define IP_PMTUDISC_WANT		1	/* Use per route hints	*/
Index: linux-5.10.205-untangle-3/include/uapi/linux/udp.h
===================================================================
--- linux-5.10.205-untangle-3.orig/include/uapi/linux/udp.h	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/include/uapi/linux/udp.h	2024-01-09 15:46:29.069564349 +0100
@@ -35,6 +35,9 @@
 #define UDP_SEGMENT	103	/* Set GSO segmentation size */
 #define UDP_GRO		104	/* This socket can receive UDP GRO packets */
 
+/* UDP ancillary data types */
+#define PKT_UDP_SPORT 1
+
 /* UDP encapsulation types */
 #define UDP_ENCAP_ESPINUDP_NON_IKE	1 /* draft-ietf-ipsec-nat-t-ike-00/01 */
 #define UDP_ENCAP_ESPINUDP	2 /* draft-ietf-ipsec-udp-encaps-06 */
Index: linux-5.10.205-untangle-3/net/ipv4/icmp.c
===================================================================
--- linux-5.10.205-untangle-3.orig/net/ipv4/icmp.c	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/net/ipv4/icmp.c	2024-01-09 15:46:29.069564349 +0100
@@ -428,6 +428,8 @@
 		goto out_bh_enable;
 	inet = inet_sk(sk);
 
+	memset(&ipc, 0, sizeof(ipc));
+
 	icmp_param->data.icmph.checksum = 0;
 
 	ipcm_init(&ipc);
@@ -734,6 +736,7 @@
 	icmp_param.skb	  = skb_in;
 	icmp_param.offset = skb_network_offset(skb_in);
 	inet_sk(sk)->tos = tos;
+        memset(&ipc, 0, sizeof(ipc));
 	ipcm_init(&ipc);
 	ipc.addr = iph->saddr;
 	ipc.opt = &icmp_param.replyopts.opt;
Index: linux-5.10.205-untangle-3/net/ipv4/ip_output.c
===================================================================
--- linux-5.10.205-untangle-3.orig/net/ipv4/ip_output.c	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/net/ipv4/ip_output.c	2024-01-09 15:46:29.069564349 +0100
@@ -971,7 +971,7 @@
 			    struct page_frag *pfrag,
 			    int getfrag(void *from, char *to, int offset,
 					int len, int odd, struct sk_buff *skb),
-			    void *from, int length, int transhdrlen,
+			    void *from, int length, int transhdrlen, struct ipcm_cookie *ipc,
 			    unsigned int flags)
 {
 	struct inet_sock *inet = inet_sk(sk);
@@ -1137,6 +1137,8 @@
 						 fragheaderlen);
 			data += fragheaderlen + exthdrlen;
 
+			skb->mark = ipc->nfmark;
+
 			if (fraggap) {
 				skb->csum = skb_copy_and_csum_bits(
 					skb_prev, maxfraglen,
@@ -1334,7 +1336,7 @@
 
 	return __ip_append_data(sk, fl4, &sk->sk_write_queue, &inet->cork.base,
 				sk_page_frag(sk), getfrag,
-				from, length, transhdrlen, flags);
+				from, length, transhdrlen, ipc, flags);
 }
 
 ssize_t	ip_append_page(struct sock *sk, struct flowi4 *fl4, struct page *page,
@@ -1555,7 +1557,7 @@
 	}
 
 	skb->priority = (cork->tos != -1) ? cork->priority: sk->sk_priority;
-	skb->mark = cork->mark;
+	skb->mark |= cork->mark;
 	skb->tstamp = cork->transmit_time;
 	/*
 	 * Steal rt from cork.dst to avoid a pair of atomic_inc/atomic_dec
@@ -1655,7 +1657,7 @@
 
 	err = __ip_append_data(sk, fl4, &queue, cork,
 			       &current->task_frag, getfrag,
-			       from, length, transhdrlen, flags);
+			       from, length, transhdrlen, ipc, flags);
 	if (err) {
 		__ip_flush_pending_frames(sk, &queue, cork);
 		return ERR_PTR(err);
@@ -1699,6 +1701,7 @@
 	if (__ip_options_echo(net, &replyopts.opt.opt, skb, sopt))
 		return;
 
+	memset(&ipc, 0, sizeof(ipc));
 	ipcm_init(&ipc);
 	ipc.addr = daddr;
 	ipc.sockc.transmit_time = transmit_time;
Index: linux-5.10.205-untangle-3/net/ipv4/ip_sockglue.c
===================================================================
--- linux-5.10.205-untangle-3.orig/net/ipv4/ip_sockglue.c	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/net/ipv4/ip_sockglue.c	2024-01-09 16:31:05.500590307 +0100
@@ -325,6 +325,22 @@
 				return -EINVAL;
 			ipc->protocol = val;
 			break;
+		case IP_SADDR:
+		{
+			struct in_addr *in;
+			if (cmsg->cmsg_len != CMSG_LEN(sizeof(struct in_addr)))
+				return -EINVAL;
+			in = (struct in_addr *)CMSG_DATA(cmsg);
+			ipc->addr = in->s_addr;
+			break;
+		}
+		case IP_SENDNFMARK:
+		{
+			if (cmsg->cmsg_len != CMSG_LEN(sizeof(u32)))
+				return -EINVAL;
+			ipc->nfmark = *(u32 *)CMSG_DATA(cmsg);
+			break;
+		}
 		default:
 			return -EINVAL;
 		}
@@ -1048,6 +1064,24 @@
 		else
 			inet->cmsg_flags &= ~IP_CMSG_RECVFRAGSIZE;
 		break;
+	case IP_SENDNFMARK:
+	{
+		struct ip_sendnfmark_opts nfopt;
+
+		if (optlen != sizeof(struct ip_sendnfmark_opts))
+			goto e_inval;
+		if (copy_from_sockptr(&nfopt, optval, sizeof(struct ip_sendnfmark_opts))) {
+			err = -EFAULT;
+			break;
+		}
+		/* Changed semantics for version 2.6.32 and above -- reset to 0 when
+		not 'on' */
+		if (nfopt.on)
+			sk->sk_mark = nfopt.mark;
+		else
+			sk->sk_mark = 0;
+		break;
+	}
 	case IP_TOS:	/* This sets both TOS and Precedence */
 		__ip_sock_set_tos(sk, val);
 		break;
@@ -1594,6 +1628,23 @@
 	case IP_CHECKSUM:
 		val = (inet->cmsg_flags & IP_CMSG_CHECKSUM) != 0;
 		break;
+	case IP_SENDNFMARK:
+	{
+		struct ip_sendnfmark_opts opts;
+
+		/* Changed semantics for version 2.6.32 and above -- always on */
+		opts.on = 1;
+		opts.mark =  sk->sk_mark;
+		release_sock(sk);
+
+		if (len < sizeof(struct ip_sendnfmark_opts)) {
+			return -EINVAL;
+		}
+		if(copy_to_user(optval, &opts, sizeof(struct ip_sendnfmark_opts))) {
+			return -EFAULT;
+		}
+		return 0;
+	}
 	case IP_RECVFRAGSIZE:
 		val = (inet->cmsg_flags & IP_CMSG_RECVFRAGSIZE) != 0;
 		break;
Index: linux-5.10.205-untangle-3/net/ipv4/raw.c
===================================================================
--- linux-5.10.205-untangle-3.orig/net/ipv4/raw.c	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/net/ipv4/raw.c	2024-01-09 15:46:29.073564298 +0100
@@ -558,6 +558,8 @@
 		daddr = inet->inet_daddr;
 	}
 
+	memset(&ipc, 0, sizeof(ipc));
+
 	ipcm_init_sk(&ipc, inet);
 	/* Keep backward compat */
 	if (hdrincl)
Index: linux-5.10.205-untangle-3/net/ipv4/udp.c
===================================================================
--- linux-5.10.205-untangle-3.orig/net/ipv4/udp.c	2024-01-09 15:46:29.081564194 +0100
+++ linux-5.10.205-untangle-3/net/ipv4/udp.c	2024-01-09 15:46:29.073564298 +0100
@@ -902,7 +902,8 @@
 	 * Create a UDP header
 	 */
 	uh = udp_hdr(skb);
-	uh->source = inet->inet_sport;
+	//uh->source = inet->inet_sport;
+	uh->source = fl4->fl4_sport;
 	uh->dest = fl4->fl4_dport;
 	uh->len = htons(len);
 	uh->check = 0;
@@ -1007,6 +1008,14 @@
 			return -EINVAL;
 		*gso_size = *(__u16 *)CMSG_DATA(cmsg);
 		return 0;
+        case PKT_UDP_SPORT:
+		{
+			struct ipcm_cookie *ipc = container_of(gso_size, struct ipcm_cookie, gso_size);
+			if (cmsg->cmsg_len != CMSG_LEN(sizeof(__u16)))
+				return -EINVAL;
+			ipc->pkt_udp_sport = *(__u16 *)CMSG_DATA(cmsg);
+			return 0;
+		}
 	default:
 		return -EINVAL;
 	}
@@ -1049,7 +1058,7 @@
 	int free = 0;
 	int connected = 0;
 	__be32 daddr, faddr, saddr;
-	__be16 dport;
+	__be16 dport, sport;
 	u8  tos;
 	int err, is_udplite = IS_UDPLITE(sk);
 	int corkreq = READ_ONCE(up->corkflag) || msg->msg_flags&MSG_MORE;
@@ -1113,6 +1122,7 @@
 		connected = 1;
 	}
 
+	memset(&ipc, 0, sizeof(ipc));
 	ipcm_init_sk(&ipc, inet);
 	ipc.gso_size = READ_ONCE(up->gso_size);
 
@@ -1158,6 +1168,11 @@
 		}
 	}
 
+	sport = inet->inet_sport;
+
+	if (ipc.pkt_udp_sport)
+		sport = ipc.pkt_udp_sport;
+
 	saddr = ipc.addr;
 	ipc.addr = faddr = daddr;
 
@@ -1211,7 +1226,7 @@
 		flowi4_init_output(fl4, ipc.oif, ipc.sockc.mark, tos,
 				   RT_SCOPE_UNIVERSE, sk->sk_protocol,
 				   flow_flags,
-				   faddr, saddr, dport, inet->inet_sport,
+				   faddr, saddr, dport, sport,
 				   sk->sk_uid);
 
 		security_sk_classify_flow(sk, flowi4_to_flowi_common(fl4));
@@ -1270,7 +1285,7 @@
 	fl4->daddr = daddr;
 	fl4->saddr = saddr;
 	fl4->fl4_dport = dport;
-	fl4->fl4_sport = inet->inet_sport;
+	fl4->fl4_sport = sport;
 	up->pending = AF_INET;
 
 do_append_data:
