From 92426f19be94ac7f85ce0fe2dfd8f94de3306276 Mon Sep 17 00:00:00 2001
From: Brett Mastbergen <bmastbergen@untangle.com>
Date: Mon, 13 Jan 2020 10:47:25 -0500
Subject: [PATCH 2/8] untangle: extensions

This provides extensions to cmsg so that special fields like NFMARK,
and SADDR can be specified in cmsg ancilarry data options in
recvfrom and sendmsg.  This is used in libnetcap to send and
receive UDP packets.
---
 include/linux/in.h       |  6 +++++
 include/net/ip.h         |  5 ++++
 include/uapi/linux/in.h  |  4 ++++
 include/uapi/linux/udp.h |  3 +++
 net/ipv4/icmp.c          |  3 +++
 net/ipv4/ip_output.c     | 11 +++++----
 net/ipv4/ip_sockglue.c   | 52 ++++++++++++++++++++++++++++++++++++++++
 net/ipv4/raw.c           |  2 ++
 net/ipv4/udp.c           | 23 ++++++++++++++----
 9 files changed, 101 insertions(+), 8 deletions(-)

Index: linux-5.10.113/include/linux/in.h
===================================================================
--- linux-5.10.113.orig/include/linux/in.h
+++ linux-5.10.113/include/linux/in.h
@@ -14,6 +14,12 @@
 #ifndef _LINUX_IN_H
 #define _LINUX_IN_H
 
+#include <linux/types.h>
+
+struct ip_sendnfmark_opts {
+	u32 on;
+	u32 mark;
+};
 
 #include <linux/errno.h>
 #include <uapi/linux/in.h>
Index: linux-5.10.113/include/net/ip.h
===================================================================
--- linux-5.10.113.orig/include/net/ip.h
+++ linux-5.10.113/include/net/ip.h
@@ -74,6 +74,11 @@ struct ipcm_cookie {
 	__be32			addr;
 	int			oif;
 	struct ip_options_rcu	*opt;
+
+	/* Extensions */
+	u16 pkt_udp_sport;
+	u32 nfmark;
+
 	__u8			ttl;
 	__s16			tos;
 	char			priority;
Index: linux-5.10.113/include/uapi/linux/in.h
===================================================================
--- linux-5.10.113.orig/include/uapi/linux/in.h
+++ linux-5.10.113/include/uapi/linux/in.h
@@ -125,6 +125,10 @@ struct in_addr {
 #define IP_RECVFRAGSIZE	25
 #define IP_RECVERR_RFC4884	26
 
+/* Extensions */
+#define IP_SADDR	27
+#define IP_SENDNFMARK	28
+
 /* IP_MTU_DISCOVER values */
 #define IP_PMTUDISC_DONT		0	/* Never send DF frames */
 #define IP_PMTUDISC_WANT		1	/* Use per route hints	*/
Index: linux-5.10.113/include/uapi/linux/udp.h
===================================================================
--- linux-5.10.113.orig/include/uapi/linux/udp.h
+++ linux-5.10.113/include/uapi/linux/udp.h
@@ -35,6 +35,9 @@ struct udphdr {
 #define UDP_SEGMENT	103	/* Set GSO segmentation size */
 #define UDP_GRO		104	/* This socket can receive UDP GRO packets */
 
+/* UDP ancillary data types */
+#define PKT_UDP_SPORT 1
+
 /* UDP encapsulation types */
 #define UDP_ENCAP_ESPINUDP_NON_IKE	1 /* draft-ietf-ipsec-nat-t-ike-00/01 */
 #define UDP_ENCAP_ESPINUDP	2 /* draft-ietf-ipsec-udp-encaps-06 */
Index: linux-5.10.113/net/ipv4/icmp.c
===================================================================
--- linux-5.10.113.orig/net/ipv4/icmp.c
+++ linux-5.10.113/net/ipv4/icmp.c
@@ -426,6 +426,8 @@ static void icmp_reply(struct icmp_bxm *
 		goto out_bh_enable;
 	inet = inet_sk(sk);
 
+	memset(&ipc, 0, sizeof(ipc));
+
 	icmp_param->data.icmph.checksum = 0;
 
 	ipcm_init(&ipc);
@@ -732,6 +734,7 @@ void __icmp_send(struct sk_buff *skb_in,
 	icmp_param.skb	  = skb_in;
 	icmp_param.offset = skb_network_offset(skb_in);
 	inet_sk(sk)->tos = tos;
+        memset(&ipc, 0, sizeof(ipc));
 	ipcm_init(&ipc);
 	ipc.addr = iph->saddr;
 	ipc.opt = &icmp_param.replyopts.opt;
Index: linux-5.10.113/net/ipv4/ip_output.c
===================================================================
--- linux-5.10.113.orig/net/ipv4/ip_output.c
+++ linux-5.10.113/net/ipv4/ip_output.c
@@ -971,7 +971,7 @@ static int __ip_append_data(struct sock
 			    struct page_frag *pfrag,
 			    int getfrag(void *from, char *to, int offset,
 					int len, int odd, struct sk_buff *skb),
-			    void *from, int length, int transhdrlen,
+			    void *from, int length, int transhdrlen, struct ipcm_cookie *ipc,
 			    unsigned int flags)
 {
 	struct inet_sock *inet = inet_sk(sk);
@@ -1137,6 +1137,8 @@ alloc_new_skb:
 						 fragheaderlen);
 			data += fragheaderlen + exthdrlen;
 
+			skb->mark = ipc->nfmark;
+
 			if (fraggap) {
 				skb->csum = skb_copy_and_csum_bits(
 					skb_prev, maxfraglen,
@@ -1334,7 +1336,7 @@ int ip_append_data(struct sock *sk, stru
 
 	return __ip_append_data(sk, fl4, &sk->sk_write_queue, &inet->cork.base,
 				sk_page_frag(sk), getfrag,
-				from, length, transhdrlen, flags);
+				from, length, transhdrlen, ipc, flags);
 }
 
 ssize_t	ip_append_page(struct sock *sk, struct flowi4 *fl4, struct page *page,
@@ -1555,7 +1557,7 @@ struct sk_buff *__ip_make_skb(struct soc
 	}
 
 	skb->priority = (cork->tos != -1) ? cork->priority: sk->sk_priority;
-	skb->mark = cork->mark;
+	skb->mark |= cork->mark;
 	skb->tstamp = cork->transmit_time;
 	/*
 	 * Steal rt from cork.dst to avoid a pair of atomic_inc/atomic_dec
@@ -1645,7 +1647,7 @@ struct sk_buff *ip_make_skb(struct sock
 
 	err = __ip_append_data(sk, fl4, &queue, cork,
 			       &current->task_frag, getfrag,
-			       from, length, transhdrlen, flags);
+			       from, length, transhdrlen, ipc, flags);
 	if (err) {
 		__ip_flush_pending_frames(sk, &queue, cork);
 		return ERR_PTR(err);
@@ -1689,6 +1691,7 @@ void ip_send_unicast_reply(struct sock *
 	if (__ip_options_echo(net, &replyopts.opt.opt, skb, sopt))
 		return;
 
+	memset(&ipc, 0, sizeof(ipc));
 	ipcm_init(&ipc);
 	ipc.addr = daddr;
 	ipc.sockc.transmit_time = transmit_time;
Index: linux-5.10.113/net/ipv4/ip_sockglue.c
===================================================================
--- linux-5.10.113.orig/net/ipv4/ip_sockglue.c
+++ linux-5.10.113/net/ipv4/ip_sockglue.c
@@ -317,6 +317,22 @@ int ip_cmsg_send(struct sock *sk, struct
 			ipc->tos = val;
 			ipc->priority = rt_tos2priority(ipc->tos);
 			break;
+		case IP_SADDR:
+		{
+			struct in_addr *in;
+			if (cmsg->cmsg_len != CMSG_LEN(sizeof(struct in_addr)))
+				return -EINVAL;
+			in = (struct in_addr *)CMSG_DATA(cmsg);
+			ipc->addr = in->s_addr;
+			break;
+		}
+		case IP_SENDNFMARK:
+		{
+			if (cmsg->cmsg_len != CMSG_LEN(sizeof(u32)))
+				return -EINVAL;
+			ipc->nfmark = *(u32 *)CMSG_DATA(cmsg);
+			break;
+		}
 
 		default:
 			return -EINVAL;
@@ -1041,6 +1057,25 @@ static int do_ip_setsockopt(struct sock
 		else
 			inet->cmsg_flags &= ~IP_CMSG_RECVFRAGSIZE;
 		break;
+
+	case IP_SENDNFMARK:
+	{
+		struct ip_sendnfmark_opts nfopt;
+
+		if (optlen != sizeof(struct ip_sendnfmark_opts))
+			goto e_inval;
+		if (copy_from_sockptr(&nfopt, optval, sizeof(struct ip_sendnfmark_opts))) {
+			err = -EFAULT;
+			break;
+		}
+		/* Changed semantics for version 2.6.32 and above -- reset to 0 when
+		not 'on' */
+		if (nfopt.on)
+			sk->sk_mark = nfopt.mark;
+		else
+			sk->sk_mark = 0;
+		break;
+	}
 	case IP_TOS:	/* This sets both TOS and Precedence */
 		__ip_sock_set_tos(sk, val);
 		break;
@@ -1587,6 +1622,23 @@ static int do_ip_getsockopt(struct sock
 	case IP_CHECKSUM:
 		val = (inet->cmsg_flags & IP_CMSG_CHECKSUM) != 0;
 		break;
+	case IP_SENDNFMARK:
+	{
+		struct ip_sendnfmark_opts opts;
+
+		/* Changed semantics for version 2.6.32 and above -- always on */
+		opts.on = 1;
+		opts.mark =  sk->sk_mark;
+		release_sock(sk);
+
+		if (len < sizeof(struct ip_sendnfmark_opts)) {
+			return -EINVAL;
+		}
+		if(copy_to_user(optval, &opts, sizeof(struct ip_sendnfmark_opts))) {
+			return -EFAULT;
+		}
+		return 0;
+	}
 	case IP_RECVFRAGSIZE:
 		val = (inet->cmsg_flags & IP_CMSG_RECVFRAGSIZE) != 0;
 		break;
Index: linux-5.10.113/net/ipv4/raw.c
===================================================================
--- linux-5.10.113.orig/net/ipv4/raw.c
+++ linux-5.10.113/net/ipv4/raw.c
@@ -558,6 +558,8 @@ static int raw_sendmsg(struct sock *sk,
 		daddr = inet->inet_daddr;
 	}
 
+	memset(&ipc, 0, sizeof(ipc));
+
 	ipcm_init_sk(&ipc, inet);
 
 	if (msg->msg_controllen) {
Index: linux-5.10.113/net/ipv4/udp.c
===================================================================
--- linux-5.10.113.orig/net/ipv4/udp.c
+++ linux-5.10.113/net/ipv4/udp.c
@@ -892,7 +892,8 @@ static int udp_send_skb(struct sk_buff *
 	 * Create a UDP header
 	 */
 	uh = udp_hdr(skb);
-	uh->source = inet->inet_sport;
+	//uh->source = inet->inet_sport;
+	uh->source = fl4->fl4_sport;
 	uh->dest = fl4->fl4_dport;
 	uh->len = htons(len);
 	uh->check = 0;
@@ -997,6 +998,14 @@ static int __udp_cmsg_send(struct cmsghd
 			return -EINVAL;
 		*gso_size = *(__u16 *)CMSG_DATA(cmsg);
 		return 0;
+        case PKT_UDP_SPORT:
+		{
+			struct ipcm_cookie *ipc = container_of(gso_size, struct ipcm_cookie, gso_size);
+			if (cmsg->cmsg_len != CMSG_LEN(sizeof(__u16)))
+				return -EINVAL;
+			ipc->pkt_udp_sport = *(__u16 *)CMSG_DATA(cmsg);
+			return 0;
+		}
 	default:
 		return -EINVAL;
 	}
@@ -1039,7 +1048,7 @@ int udp_sendmsg(struct sock *sk, struct
 	int free = 0;
 	int connected = 0;
 	__be32 daddr, faddr, saddr;
-	__be16 dport;
+	__be16 dport, sport;
 	u8  tos;
 	int err, is_udplite = IS_UDPLITE(sk);
 	int corkreq = READ_ONCE(up->corkflag) || msg->msg_flags&MSG_MORE;
@@ -1103,6 +1112,7 @@ int udp_sendmsg(struct sock *sk, struct
 		connected = 1;
 	}
 
+	memset(&ipc, 0, sizeof(ipc));
 	ipcm_init_sk(&ipc, inet);
 	ipc.gso_size = READ_ONCE(up->gso_size);
 
@@ -1148,6 +1158,11 @@ int udp_sendmsg(struct sock *sk, struct
 		}
 	}
 
+	sport = inet->inet_sport;
+
+	if (ipc.pkt_udp_sport)
+		sport = ipc.pkt_udp_sport;
+
 	saddr = ipc.addr;
 	ipc.addr = faddr = daddr;
 
@@ -1201,7 +1216,7 @@ int udp_sendmsg(struct sock *sk, struct
 		flowi4_init_output(fl4, ipc.oif, ipc.sockc.mark, tos,
 				   RT_SCOPE_UNIVERSE, sk->sk_protocol,
 				   flow_flags,
-				   faddr, saddr, dport, inet->inet_sport,
+				   faddr, saddr, dport, sport,
 				   sk->sk_uid);
 
 		security_sk_classify_flow(sk, flowi4_to_flowi(fl4));
@@ -1260,7 +1275,7 @@ back_from_confirm:
 	fl4->daddr = daddr;
 	fl4->saddr = saddr;
 	fl4->fl4_dport = dport;
-	fl4->fl4_sport = inet->inet_sport;
+	fl4->fl4_sport = sport;
 	up->pending = AF_INET;
 
 do_append_data:
